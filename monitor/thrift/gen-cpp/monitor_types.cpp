/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "monitor_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace monitor {


ExtentInfo::~ExtentInfo() throw() {
}


void ExtentInfo::__set_m_eid(const std::string& val) {
  this->m_eid = val;
}

void ExtentInfo::__set_m_pool(const int32_t val) {
  this->m_pool = val;
}

void ExtentInfo::__set_m_rio(const double val) {
  this->m_rio = val;
}

void ExtentInfo::__set_m_wio(const double val) {
  this->m_wio = val;
}

const char* ExtentInfo::ascii_fingerprint = "3B9489F6E4053822D2FC62187C08252F";
const uint8_t ExtentInfo::binary_fingerprint[16] = {0x3B,0x94,0x89,0xF6,0xE4,0x05,0x38,0x22,0xD2,0xFC,0x62,0x18,0x7C,0x08,0x25,0x2F};

uint32_t ExtentInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->m_eid);
          this->__isset.m_eid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->m_pool);
          this->__isset.m_pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->m_rio);
          this->__isset.m_rio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->m_wio);
          this->__isset.m_wio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExtentInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ExtentInfo");

  xfer += oprot->writeFieldBegin("m_eid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->m_eid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_pool", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->m_pool);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_rio", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->m_rio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_wio", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->m_wio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ExtentInfo &a, ExtentInfo &b) {
  using ::std::swap;
  swap(a.m_eid, b.m_eid);
  swap(a.m_pool, b.m_pool);
  swap(a.m_rio, b.m_rio);
  swap(a.m_wio, b.m_wio);
  swap(a.__isset, b.__isset);
}

ExtentInfo::ExtentInfo(const ExtentInfo& other0) {
  m_eid = other0.m_eid;
  m_pool = other0.m_pool;
  m_rio = other0.m_rio;
  m_wio = other0.m_wio;
  __isset = other0.__isset;
}
ExtentInfo& ExtentInfo::operator=(const ExtentInfo& other1) {
  m_eid = other1.m_eid;
  m_pool = other1.m_pool;
  m_rio = other1.m_rio;
  m_wio = other1.m_wio;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ExtentInfo& obj) {
  using apache::thrift::to_string;
  out << "ExtentInfo(";
  out << "m_eid=" << to_string(obj.m_eid);
  out << ", " << "m_pool=" << to_string(obj.m_pool);
  out << ", " << "m_rio=" << to_string(obj.m_rio);
  out << ", " << "m_wio=" << to_string(obj.m_wio);
  out << ")";
  return out;
}


ClientInfo::~ClientInfo() throw() {
}


void ClientInfo::__set_m_extents(const std::map<std::string, ExtentInfo> & val) {
  this->m_extents = val;
}

void ClientInfo::__set_m_ip(const std::string& val) {
  this->m_ip = val;
}

const char* ClientInfo::ascii_fingerprint = "82AD1197D4804B1E4C90E140BAC827A4";
const uint8_t ClientInfo::binary_fingerprint[16] = {0x82,0xAD,0x11,0x97,0xD4,0x80,0x4B,0x1E,0x4C,0x90,0xE1,0x40,0xBA,0xC8,0x27,0xA4};

uint32_t ClientInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->m_extents.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _ktype3;
            ::apache::thrift::protocol::TType _vtype4;
            xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              std::string _key7;
              xfer += iprot->readString(_key7);
              ExtentInfo& _val8 = this->m_extents[_key7];
              xfer += _val8.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.m_extents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->m_ip);
          this->__isset.m_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ClientInfo");

  xfer += oprot->writeFieldBegin("m_extents", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->m_extents.size()));
    std::map<std::string, ExtentInfo> ::const_iterator _iter9;
    for (_iter9 = this->m_extents.begin(); _iter9 != this->m_extents.end(); ++_iter9)
    {
      xfer += oprot->writeString(_iter9->first);
      xfer += _iter9->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->m_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ClientInfo &a, ClientInfo &b) {
  using ::std::swap;
  swap(a.m_extents, b.m_extents);
  swap(a.m_ip, b.m_ip);
  swap(a.__isset, b.__isset);
}

ClientInfo::ClientInfo(const ClientInfo& other10) {
  m_extents = other10.m_extents;
  m_ip = other10.m_ip;
  __isset = other10.__isset;
}
ClientInfo& ClientInfo::operator=(const ClientInfo& other11) {
  m_extents = other11.m_extents;
  m_ip = other11.m_ip;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ClientInfo& obj) {
  using apache::thrift::to_string;
  out << "ClientInfo(";
  out << "m_extents=" << to_string(obj.m_extents);
  out << ", " << "m_ip=" << to_string(obj.m_ip);
  out << ")";
  return out;
}

} // namespace
