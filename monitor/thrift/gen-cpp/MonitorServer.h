/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MonitorServer_H
#define MonitorServer_H

#include <thrift/TDispatchProcessor.h>
#include "monitor_types.h"

namespace monitor {

class MonitorServerIf {
 public:
  virtual ~MonitorServerIf() {}
  virtual int32_t lock_and_get_pool(const std::string& eid) = 0;
  virtual void release_lock(const std::string& eid) = 0;
};

class MonitorServerIfFactory {
 public:
  typedef MonitorServerIf Handler;

  virtual ~MonitorServerIfFactory() {}

  virtual MonitorServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MonitorServerIf* /* handler */) = 0;
};

class MonitorServerIfSingletonFactory : virtual public MonitorServerIfFactory {
 public:
  MonitorServerIfSingletonFactory(const boost::shared_ptr<MonitorServerIf>& iface) : iface_(iface) {}
  virtual ~MonitorServerIfSingletonFactory() {}

  virtual MonitorServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MonitorServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<MonitorServerIf> iface_;
};

class MonitorServerNull : virtual public MonitorServerIf {
 public:
  virtual ~MonitorServerNull() {}
  int32_t lock_and_get_pool(const std::string& /* eid */) {
    int32_t _return = 0;
    return _return;
  }
  void release_lock(const std::string& /* eid */) {
    return;
  }
};

typedef struct _MonitorServer_lock_and_get_pool_args__isset {
  _MonitorServer_lock_and_get_pool_args__isset() : eid(false) {}
  bool eid :1;
} _MonitorServer_lock_and_get_pool_args__isset;

class MonitorServer_lock_and_get_pool_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MonitorServer_lock_and_get_pool_args(const MonitorServer_lock_and_get_pool_args&);
  MonitorServer_lock_and_get_pool_args& operator=(const MonitorServer_lock_and_get_pool_args&);
  MonitorServer_lock_and_get_pool_args() : eid() {
  }

  virtual ~MonitorServer_lock_and_get_pool_args() throw();
  std::string eid;

  _MonitorServer_lock_and_get_pool_args__isset __isset;

  void __set_eid(const std::string& val);

  bool operator == (const MonitorServer_lock_and_get_pool_args & rhs) const
  {
    if (!(eid == rhs.eid))
      return false;
    return true;
  }
  bool operator != (const MonitorServer_lock_and_get_pool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorServer_lock_and_get_pool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorServer_lock_and_get_pool_args& obj);
};


class MonitorServer_lock_and_get_pool_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MonitorServer_lock_and_get_pool_pargs() throw();
  const std::string* eid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorServer_lock_and_get_pool_pargs& obj);
};

typedef struct _MonitorServer_lock_and_get_pool_result__isset {
  _MonitorServer_lock_and_get_pool_result__isset() : success(false) {}
  bool success :1;
} _MonitorServer_lock_and_get_pool_result__isset;

class MonitorServer_lock_and_get_pool_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  MonitorServer_lock_and_get_pool_result(const MonitorServer_lock_and_get_pool_result&);
  MonitorServer_lock_and_get_pool_result& operator=(const MonitorServer_lock_and_get_pool_result&);
  MonitorServer_lock_and_get_pool_result() : success(0) {
  }

  virtual ~MonitorServer_lock_and_get_pool_result() throw();
  int32_t success;

  _MonitorServer_lock_and_get_pool_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MonitorServer_lock_and_get_pool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MonitorServer_lock_and_get_pool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorServer_lock_and_get_pool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorServer_lock_and_get_pool_result& obj);
};

typedef struct _MonitorServer_lock_and_get_pool_presult__isset {
  _MonitorServer_lock_and_get_pool_presult__isset() : success(false) {}
  bool success :1;
} _MonitorServer_lock_and_get_pool_presult__isset;

class MonitorServer_lock_and_get_pool_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~MonitorServer_lock_and_get_pool_presult() throw();
  int32_t* success;

  _MonitorServer_lock_and_get_pool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MonitorServer_lock_and_get_pool_presult& obj);
};

typedef struct _MonitorServer_release_lock_args__isset {
  _MonitorServer_release_lock_args__isset() : eid(false) {}
  bool eid :1;
} _MonitorServer_release_lock_args__isset;

class MonitorServer_release_lock_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MonitorServer_release_lock_args(const MonitorServer_release_lock_args&);
  MonitorServer_release_lock_args& operator=(const MonitorServer_release_lock_args&);
  MonitorServer_release_lock_args() : eid() {
  }

  virtual ~MonitorServer_release_lock_args() throw();
  std::string eid;

  _MonitorServer_release_lock_args__isset __isset;

  void __set_eid(const std::string& val);

  bool operator == (const MonitorServer_release_lock_args & rhs) const
  {
    if (!(eid == rhs.eid))
      return false;
    return true;
  }
  bool operator != (const MonitorServer_release_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorServer_release_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorServer_release_lock_args& obj);
};


class MonitorServer_release_lock_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MonitorServer_release_lock_pargs() throw();
  const std::string* eid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorServer_release_lock_pargs& obj);
};


class MonitorServer_release_lock_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MonitorServer_release_lock_result(const MonitorServer_release_lock_result&);
  MonitorServer_release_lock_result& operator=(const MonitorServer_release_lock_result&);
  MonitorServer_release_lock_result() {
  }

  virtual ~MonitorServer_release_lock_result() throw();

  bool operator == (const MonitorServer_release_lock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MonitorServer_release_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorServer_release_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorServer_release_lock_result& obj);
};


class MonitorServer_release_lock_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MonitorServer_release_lock_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MonitorServer_release_lock_presult& obj);
};

class MonitorServerClient : virtual public MonitorServerIf {
 public:
  MonitorServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MonitorServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t lock_and_get_pool(const std::string& eid);
  void send_lock_and_get_pool(const std::string& eid);
  int32_t recv_lock_and_get_pool();
  void release_lock(const std::string& eid);
  void send_release_lock(const std::string& eid);
  void recv_release_lock();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MonitorServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MonitorServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MonitorServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_lock_and_get_pool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_release_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MonitorServerProcessor(boost::shared_ptr<MonitorServerIf> iface) :
    iface_(iface) {
    processMap_["lock_and_get_pool"] = &MonitorServerProcessor::process_lock_and_get_pool;
    processMap_["release_lock"] = &MonitorServerProcessor::process_release_lock;
  }

  virtual ~MonitorServerProcessor() {}
};

class MonitorServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MonitorServerProcessorFactory(const ::boost::shared_ptr< MonitorServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MonitorServerIfFactory > handlerFactory_;
};

class MonitorServerMultiface : virtual public MonitorServerIf {
 public:
  MonitorServerMultiface(std::vector<boost::shared_ptr<MonitorServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MonitorServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MonitorServerIf> > ifaces_;
  MonitorServerMultiface() {}
  void add(boost::shared_ptr<MonitorServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t lock_and_get_pool(const std::string& eid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lock_and_get_pool(eid);
    }
    return ifaces_[i]->lock_and_get_pool(eid);
  }

  void release_lock(const std::string& eid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->release_lock(eid);
    }
    ifaces_[i]->release_lock(eid);
  }

};

} // namespace

#endif
