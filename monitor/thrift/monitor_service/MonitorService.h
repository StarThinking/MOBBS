/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MonitorService_H
#define MonitorService_H

#include <thrift/TDispatchProcessor.h>
#include "monitor_types.h"

namespace monitor {

class MonitorServiceIf {
 public:
  virtual ~MonitorServiceIf() {}
  virtual void finish_lock(const std::string& eid) = 0;
  virtual void report_client_info(const ClientInfo& ci) = 0;
  virtual void finish_migration(const std::string& eid) = 0;
};

class MonitorServiceIfFactory {
 public:
  typedef MonitorServiceIf Handler;

  virtual ~MonitorServiceIfFactory() {}

  virtual MonitorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MonitorServiceIf* /* handler */) = 0;
};

class MonitorServiceIfSingletonFactory : virtual public MonitorServiceIfFactory {
 public:
  MonitorServiceIfSingletonFactory(const boost::shared_ptr<MonitorServiceIf>& iface) : iface_(iface) {}
  virtual ~MonitorServiceIfSingletonFactory() {}

  virtual MonitorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MonitorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MonitorServiceIf> iface_;
};

class MonitorServiceNull : virtual public MonitorServiceIf {
 public:
  virtual ~MonitorServiceNull() {}
  void finish_lock(const std::string& /* eid */) {
    return;
  }
  void report_client_info(const ClientInfo& /* ci */) {
    return;
  }
  void finish_migration(const std::string& /* eid */) {
    return;
  }
};

typedef struct _MonitorService_finish_lock_args__isset {
  _MonitorService_finish_lock_args__isset() : eid(false) {}
  bool eid :1;
} _MonitorService_finish_lock_args__isset;

class MonitorService_finish_lock_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MonitorService_finish_lock_args(const MonitorService_finish_lock_args&);
  MonitorService_finish_lock_args& operator=(const MonitorService_finish_lock_args&);
  MonitorService_finish_lock_args() : eid() {
  }

  virtual ~MonitorService_finish_lock_args() throw();
  std::string eid;

  _MonitorService_finish_lock_args__isset __isset;

  void __set_eid(const std::string& val);

  bool operator == (const MonitorService_finish_lock_args & rhs) const
  {
    if (!(eid == rhs.eid))
      return false;
    return true;
  }
  bool operator != (const MonitorService_finish_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_finish_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_finish_lock_args& obj);
};


class MonitorService_finish_lock_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MonitorService_finish_lock_pargs() throw();
  const std::string* eid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_finish_lock_pargs& obj);
};


class MonitorService_finish_lock_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MonitorService_finish_lock_result(const MonitorService_finish_lock_result&);
  MonitorService_finish_lock_result& operator=(const MonitorService_finish_lock_result&);
  MonitorService_finish_lock_result() {
  }

  virtual ~MonitorService_finish_lock_result() throw();

  bool operator == (const MonitorService_finish_lock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MonitorService_finish_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_finish_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_finish_lock_result& obj);
};


class MonitorService_finish_lock_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MonitorService_finish_lock_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_finish_lock_presult& obj);
};

typedef struct _MonitorService_report_client_info_args__isset {
  _MonitorService_report_client_info_args__isset() : ci(false) {}
  bool ci :1;
} _MonitorService_report_client_info_args__isset;

class MonitorService_report_client_info_args {
 public:

  static const char* ascii_fingerprint; // = "C94DDEBA1D1AA612098BB8C33170EF7F";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x4D,0xDE,0xBA,0x1D,0x1A,0xA6,0x12,0x09,0x8B,0xB8,0xC3,0x31,0x70,0xEF,0x7F};

  MonitorService_report_client_info_args(const MonitorService_report_client_info_args&);
  MonitorService_report_client_info_args& operator=(const MonitorService_report_client_info_args&);
  MonitorService_report_client_info_args() {
  }

  virtual ~MonitorService_report_client_info_args() throw();
  ClientInfo ci;

  _MonitorService_report_client_info_args__isset __isset;

  void __set_ci(const ClientInfo& val);

  bool operator == (const MonitorService_report_client_info_args & rhs) const
  {
    if (!(ci == rhs.ci))
      return false;
    return true;
  }
  bool operator != (const MonitorService_report_client_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_report_client_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_report_client_info_args& obj);
};


class MonitorService_report_client_info_pargs {
 public:

  static const char* ascii_fingerprint; // = "C94DDEBA1D1AA612098BB8C33170EF7F";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x4D,0xDE,0xBA,0x1D,0x1A,0xA6,0x12,0x09,0x8B,0xB8,0xC3,0x31,0x70,0xEF,0x7F};


  virtual ~MonitorService_report_client_info_pargs() throw();
  const ClientInfo* ci;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_report_client_info_pargs& obj);
};


class MonitorService_report_client_info_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MonitorService_report_client_info_result(const MonitorService_report_client_info_result&);
  MonitorService_report_client_info_result& operator=(const MonitorService_report_client_info_result&);
  MonitorService_report_client_info_result() {
  }

  virtual ~MonitorService_report_client_info_result() throw();

  bool operator == (const MonitorService_report_client_info_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MonitorService_report_client_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_report_client_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_report_client_info_result& obj);
};


class MonitorService_report_client_info_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MonitorService_report_client_info_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_report_client_info_presult& obj);
};

typedef struct _MonitorService_finish_migration_args__isset {
  _MonitorService_finish_migration_args__isset() : eid(false) {}
  bool eid :1;
} _MonitorService_finish_migration_args__isset;

class MonitorService_finish_migration_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MonitorService_finish_migration_args(const MonitorService_finish_migration_args&);
  MonitorService_finish_migration_args& operator=(const MonitorService_finish_migration_args&);
  MonitorService_finish_migration_args() : eid() {
  }

  virtual ~MonitorService_finish_migration_args() throw();
  std::string eid;

  _MonitorService_finish_migration_args__isset __isset;

  void __set_eid(const std::string& val);

  bool operator == (const MonitorService_finish_migration_args & rhs) const
  {
    if (!(eid == rhs.eid))
      return false;
    return true;
  }
  bool operator != (const MonitorService_finish_migration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_finish_migration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_finish_migration_args& obj);
};


class MonitorService_finish_migration_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MonitorService_finish_migration_pargs() throw();
  const std::string* eid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_finish_migration_pargs& obj);
};


class MonitorService_finish_migration_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MonitorService_finish_migration_result(const MonitorService_finish_migration_result&);
  MonitorService_finish_migration_result& operator=(const MonitorService_finish_migration_result&);
  MonitorService_finish_migration_result() {
  }

  virtual ~MonitorService_finish_migration_result() throw();

  bool operator == (const MonitorService_finish_migration_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MonitorService_finish_migration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_finish_migration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_finish_migration_result& obj);
};


class MonitorService_finish_migration_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MonitorService_finish_migration_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MonitorService_finish_migration_presult& obj);
};

class MonitorServiceClient : virtual public MonitorServiceIf {
 public:
  MonitorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MonitorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void finish_lock(const std::string& eid);
  void send_finish_lock(const std::string& eid);
  void recv_finish_lock();
  void report_client_info(const ClientInfo& ci);
  void send_report_client_info(const ClientInfo& ci);
  void recv_report_client_info();
  void finish_migration(const std::string& eid);
  void send_finish_migration(const std::string& eid);
  void recv_finish_migration();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MonitorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MonitorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MonitorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_finish_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_report_client_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_finish_migration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MonitorServiceProcessor(boost::shared_ptr<MonitorServiceIf> iface) :
    iface_(iface) {
    processMap_["finish_lock"] = &MonitorServiceProcessor::process_finish_lock;
    processMap_["report_client_info"] = &MonitorServiceProcessor::process_report_client_info;
    processMap_["finish_migration"] = &MonitorServiceProcessor::process_finish_migration;
  }

  virtual ~MonitorServiceProcessor() {}
};

class MonitorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MonitorServiceProcessorFactory(const ::boost::shared_ptr< MonitorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MonitorServiceIfFactory > handlerFactory_;
};

class MonitorServiceMultiface : virtual public MonitorServiceIf {
 public:
  MonitorServiceMultiface(std::vector<boost::shared_ptr<MonitorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MonitorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MonitorServiceIf> > ifaces_;
  MonitorServiceMultiface() {}
  void add(boost::shared_ptr<MonitorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void finish_lock(const std::string& eid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->finish_lock(eid);
    }
    ifaces_[i]->finish_lock(eid);
  }

  void report_client_info(const ClientInfo& ci) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->report_client_info(ci);
    }
    ifaces_[i]->report_client_info(ci);
  }

  void finish_migration(const std::string& eid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->finish_migration(eid);
    }
    ifaces_[i]->finish_migration(eid);
  }

};

} // namespace

#endif
