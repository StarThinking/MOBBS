/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef monitor_TYPES_H
#define monitor_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace monitor {

class ExtentInfo;

class ClientInfo;

typedef struct _ExtentInfo__isset {
  _ExtentInfo__isset() : m_eid(false), m_pool(false), m_rio(false), m_wio(false) {}
  bool m_eid :1;
  bool m_pool :1;
  bool m_rio :1;
  bool m_wio :1;
} _ExtentInfo__isset;

class ExtentInfo {
 public:

  static const char* ascii_fingerprint; // = "3B9489F6E4053822D2FC62187C08252F";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0x94,0x89,0xF6,0xE4,0x05,0x38,0x22,0xD2,0xFC,0x62,0x18,0x7C,0x08,0x25,0x2F};

  ExtentInfo(const ExtentInfo&);
  ExtentInfo& operator=(const ExtentInfo&);
  ExtentInfo() : m_eid(), m_pool(0), m_rio(0), m_wio(0) {
  }

  virtual ~ExtentInfo() throw();
  std::string m_eid;
  int32_t m_pool;
  double m_rio;
  double m_wio;

  _ExtentInfo__isset __isset;

  void __set_m_eid(const std::string& val);

  void __set_m_pool(const int32_t val);

  void __set_m_rio(const double val);

  void __set_m_wio(const double val);

  bool operator == (const ExtentInfo & rhs) const
  {
    if (!(m_eid == rhs.m_eid))
      return false;
    if (!(m_pool == rhs.m_pool))
      return false;
    if (!(m_rio == rhs.m_rio))
      return false;
    if (!(m_wio == rhs.m_wio))
      return false;
    return true;
  }
  bool operator != (const ExtentInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtentInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ExtentInfo& obj);
};

void swap(ExtentInfo &a, ExtentInfo &b);

typedef struct _ClientInfo__isset {
  _ClientInfo__isset() : m_extents(false), m_ip(false) {}
  bool m_extents :1;
  bool m_ip :1;
} _ClientInfo__isset;

class ClientInfo {
 public:

  static const char* ascii_fingerprint; // = "82AD1197D4804B1E4C90E140BAC827A4";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0xAD,0x11,0x97,0xD4,0x80,0x4B,0x1E,0x4C,0x90,0xE1,0x40,0xBA,0xC8,0x27,0xA4};

  ClientInfo(const ClientInfo&);
  ClientInfo& operator=(const ClientInfo&);
  ClientInfo() : m_ip() {
  }

  virtual ~ClientInfo() throw();
  std::map<std::string, ExtentInfo>  m_extents;
  std::string m_ip;

  _ClientInfo__isset __isset;

  void __set_m_extents(const std::map<std::string, ExtentInfo> & val);

  void __set_m_ip(const std::string& val);

  bool operator == (const ClientInfo & rhs) const
  {
    if (!(m_extents == rhs.m_extents))
      return false;
    if (!(m_ip == rhs.m_ip))
      return false;
    return true;
  }
  bool operator != (const ClientInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ClientInfo& obj);
};

void swap(ClientInfo &a, ClientInfo &b);

} // namespace

#endif
