/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MigraterService_H
#define MigraterService_H

#include <thrift/TDispatchProcessor.h>
#include "migrater_types.h"

namespace experiment {

class MigraterServiceIf {
 public:
  virtual ~MigraterServiceIf() {}
  virtual void do_migration(const std::string& eid, const int32_t from, const int32_t to) = 0;
};

class MigraterServiceIfFactory {
 public:
  typedef MigraterServiceIf Handler;

  virtual ~MigraterServiceIfFactory() {}

  virtual MigraterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MigraterServiceIf* /* handler */) = 0;
};

class MigraterServiceIfSingletonFactory : virtual public MigraterServiceIfFactory {
 public:
  MigraterServiceIfSingletonFactory(const boost::shared_ptr<MigraterServiceIf>& iface) : iface_(iface) {}
  virtual ~MigraterServiceIfSingletonFactory() {}

  virtual MigraterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MigraterServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MigraterServiceIf> iface_;
};

class MigraterServiceNull : virtual public MigraterServiceIf {
 public:
  virtual ~MigraterServiceNull() {}
  void do_migration(const std::string& /* eid */, const int32_t /* from */, const int32_t /* to */) {
    return;
  }
};

typedef struct _MigraterService_do_migration_args__isset {
  _MigraterService_do_migration_args__isset() : eid(false), from(false), to(false) {}
  bool eid :1;
  bool from :1;
  bool to :1;
} _MigraterService_do_migration_args__isset;

class MigraterService_do_migration_args {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  MigraterService_do_migration_args(const MigraterService_do_migration_args&);
  MigraterService_do_migration_args& operator=(const MigraterService_do_migration_args&);
  MigraterService_do_migration_args() : eid(), from(0), to(0) {
  }

  virtual ~MigraterService_do_migration_args() throw();
  std::string eid;
  int32_t from;
  int32_t to;

  _MigraterService_do_migration_args__isset __isset;

  void __set_eid(const std::string& val);

  void __set_from(const int32_t val);

  void __set_to(const int32_t val);

  bool operator == (const MigraterService_do_migration_args & rhs) const
  {
    if (!(eid == rhs.eid))
      return false;
    if (!(from == rhs.from))
      return false;
    if (!(to == rhs.to))
      return false;
    return true;
  }
  bool operator != (const MigraterService_do_migration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MigraterService_do_migration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MigraterService_do_migration_args& obj);
};


class MigraterService_do_migration_pargs {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};


  virtual ~MigraterService_do_migration_pargs() throw();
  const std::string* eid;
  const int32_t* from;
  const int32_t* to;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MigraterService_do_migration_pargs& obj);
};


class MigraterService_do_migration_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MigraterService_do_migration_result(const MigraterService_do_migration_result&);
  MigraterService_do_migration_result& operator=(const MigraterService_do_migration_result&);
  MigraterService_do_migration_result() {
  }

  virtual ~MigraterService_do_migration_result() throw();

  bool operator == (const MigraterService_do_migration_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MigraterService_do_migration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MigraterService_do_migration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MigraterService_do_migration_result& obj);
};


class MigraterService_do_migration_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MigraterService_do_migration_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MigraterService_do_migration_presult& obj);
};

class MigraterServiceClient : virtual public MigraterServiceIf {
 public:
  MigraterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MigraterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void do_migration(const std::string& eid, const int32_t from, const int32_t to);
  void send_do_migration(const std::string& eid, const int32_t from, const int32_t to);
  void recv_do_migration();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MigraterServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MigraterServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MigraterServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_do_migration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MigraterServiceProcessor(boost::shared_ptr<MigraterServiceIf> iface) :
    iface_(iface) {
    processMap_["do_migration"] = &MigraterServiceProcessor::process_do_migration;
  }

  virtual ~MigraterServiceProcessor() {}
};

class MigraterServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MigraterServiceProcessorFactory(const ::boost::shared_ptr< MigraterServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MigraterServiceIfFactory > handlerFactory_;
};

class MigraterServiceMultiface : virtual public MigraterServiceIf {
 public:
  MigraterServiceMultiface(std::vector<boost::shared_ptr<MigraterServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MigraterServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MigraterServiceIf> > ifaces_;
  MigraterServiceMultiface() {}
  void add(boost::shared_ptr<MigraterServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void do_migration(const std::string& eid, const int32_t from, const int32_t to) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->do_migration(eid, from, to);
    }
    ifaces_[i]->do_migration(eid, from, to);
  }

};

} // namespace

#endif
