// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Client.h"
#include "gen-cpp/ClientService.h"
#include "gen-cpp/MigraterService.h"

#include <thrift/transport/TSocket.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <pthread.h>
#include <regex.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::experiment;
using namespace std;

class ClientServiceHandler : virtual public ClientServiceIf {
 public:
  ClientServiceHandler() {
    // Your initialization goes here
  }

  void finish_migration(const std::string& eid) {
    // Your implementation goes here
    printf("finish_migration\n");
  }

};

void* listening(void* argv) {
  int port = 9090;
  shared_ptr<ClientServiceHandler> handler(new ClientServiceHandler());
  shared_ptr<TProcessor> processor(new ClientServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return NULL;
}

Client::Client()
{
	pthread_t pid;
	pthread_create(&pid, NULL, listening, NULL);
}

Client::~Client()
{}

void Client::apply_migration(string eid, int from, int to, string ip)
{
	boost::shared_ptr<TTransport> socket(new TSocket(ip, 9090));
	boost::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
	boost::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));

	MigraterServiceClient client(protocol);

	try
	{
		transport->open();
		client.do_migration(eid, from, to);
		transport->close();
	}
	catch(TException& tx)
	{
		cout << "Fail to connect migrater" << endl;
	}
	
}

string Client::eid_to_ip(string eid, int pool)
{
	string pool_name = pool == 0 ? "hdd-pool" : "ssd-pool";
	int reg_ret;
	regmatch_t pmatch[1];
	const size_t nmatch = 1;
	regex_t reg;

	FILE* fp1;
	char cmd1[100];
	sprintf(cmd1, "ceph osd map %s %s", pool_name.c_str(), eid.c_str());
	fp1 = popen(cmd1, "r");
	char res1[100];
	fgets(res1, 100, fp1);
	pclose(fp1);

	const char* pattern1 = "up \\[[0-9]+,";
	regcomp(&reg, pattern1, REG_EXTENDED);
	regexec(&reg, res1, nmatch, pmatch, 0);
	string tmp1(res1);
	string oid = tmp1.substr(pmatch[0].rm_so + 4, pmatch[0].rm_eo - pmatch[0].rm_so - 5);
	regfree(&reg);

	FILE* fp2;
	fp2 = popen("ceph osd dump", "r");
	string res2;
	while(1)
	{
		char buf[1024];
		char* ret = fgets(buf, 1024, fp2);
		if(ret == NULL) break;
		res2 += buf;
	}
	pclose(fp2);

	char pattern2[100];
	sprintf(pattern2, "osd.%s .*", oid.c_str());
	regcomp(&reg, pattern2, REG_EXTENDED);
	regexec(&reg, res2.c_str(), nmatch, pmatch, 0);
	string tmp2;
	tmp2 = res2.substr(pmatch[0].rm_so, pmatch[0].rm_eo - pmatch[0].rm_so);
	regfree(&reg);

	const char* pattern3 = "([0-9]+\\.){3}[0-9]+";
	regcomp(&reg, pattern3, REG_EXTENDED);
	regexec(&reg, tmp2.c_str(), nmatch, pmatch, 0);
	string ip;
	ip = tmp2.substr(pmatch[0].rm_so, pmatch[0].rm_eo - pmatch[0].rm_so);
	regfree(&reg);

	return ip;
}
